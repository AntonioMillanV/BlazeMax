using BlazeMaxControls.Helpers;using FastMember;using Microsoft.Extensions.Configuration;using Newtonsoft.Json;using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Net.Http;using System.Text;using System.Threading.Tasks;using veXMAX.Data;using veXMAX.Data.Helpers;using veXMAX.Lib.Extension;using veXMAX.Shared.Attributes;namespace BlazeMaxControls.Services{
    public class TransactionService    {        public HttpClient httpClient;        public Uri baseUri;        public TransactionService(IConfiguration configuration)        {            httpClient = new HttpClient();
            //baseUri = new Uri(configuration["FrogODataBaseUri"]);
            //TODO poner en configuracion del cliente
            baseUri = new Uri("https://localhost:44326/api/vxtra/");        }

        // Para cuando se usa OData
        public async Task<List<T>> ODataGet<T>(Uri uri)        {            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, uri);            try            {                var response = await httpClient.SendAsync(httpRequestMessage);                if (response.IsSuccessStatusCode)                {                    var content = await response.Content.ReadAsStringAsync();                    var result = JsonConvert.DeserializeObject<VXResponse<List<T>>>(content);                    return result?.Value;                }            }            catch (Exception e)            {
                //TODO verificar posibles errores
            }            return default;        }        public async Task<List<T>> GetFull<T>(string filter, string orderby, int top, int skip)        {            var typeName = typeof(T).Name;            var uri = new Uri(baseUri, $"{typeName}/GetFull");            uri = uri.GetODataUri(filter: filter, top: top, skip: skip, orderby: orderby, expand: null, select: null, count: null);            return await ODataGet<T>(uri);        }        public async Task<T> RegistryEntry<T>(T NewEntry)        {            if (NewEntry != null)            {
                //Set URI and make post request
                var typeName = typeof(T).Name;                var uri = new Uri(baseUri, $"{typeName}/");                var json = JsonConvert.SerializeObject(NewEntry);                var data = new StringContent(json, Encoding.UTF8, "application/json");                var response = await httpClient.PostAsync(uri, data);                if (response.IsSuccessStatusCode)                {                    var content = await response.Content.ReadAsStringAsync();                    var result = JsonConvert.DeserializeObject<T>(content);                    return result;                }            }            return default(T);        }        public async Task<int> Delete<T>(T Model)        {            var typeName = typeof(T).Name;            TypeAccessor ModelAcc = TypeAccessor.Create(Model.GetType());            var MasMem = ModelAcc.GetMembers().Where(x => x.GetAttribute(typeof(VXTransactionMasterAttribute), false) != null).FirstOrDefault();            var Master = ModelAcc[Model, MasMem.Name];            var _PK = Master.GetType().GetProperty("Key").GetValue(Master).ToSafeString();            var uri = new Uri(baseUri, $"{typeName}('{_PK}')");            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Delete, uri);            var response = await httpClient.SendAsync(httpRequestMessage);            return response.IsSuccessStatusCode ? 0 : -1;        }        public Task ExcelImportAsync(Stream ms)        {            throw new NotImplementedException();        }        public Task<byte[]> ExcelTemplateAsync(string filter, string orderby, int top, int skip)        {            throw new NotImplementedException();        }        public async Task<T> First<T>(T Model) where T : new()        {            var typeName = typeof(T).Name;            var uri = new Uri(baseUri, $"{typeName}/GetFull");            VXODataHelper<T>.First(Model, out var filter, out var @orderby, out var top);            uri = uri.GetODataUri(filter: filter, top: top, skip: null, orderby: orderby, expand: null, select: null, count: null);            var ret = (await ODataGet<T>(uri));            return ret != null ? ret[0] : default(T);        }        public async Task<T> Last<T>(T Model) where T : new()        {            var typeName = typeof(T).Name;            var uri = new Uri(baseUri, $"{typeName}/GetFull");            VXODataHelper<T>.Last(Model, out var filter, out var @orderby, out var top);            uri = uri.GetODataUri(filter: filter, top: top, skip: null, orderby: orderby, expand: null, select: null, count: null);            var ret = (await ODataGet<T>(uri));            return ret != null ? ret[0] : default(T);        }        public async Task<T> Next<T>(T Model) where T : new()        {            var typeName = typeof(T).Name;            var uri = new Uri(baseUri, $"{typeName}/GetFull");            VXODataHelper<T>.Next(Model, out var filter, out var @orderby, out var top);            uri = uri.GetODataUri(filter: filter, top: top, skip: null, orderby: orderby, expand: null, select: null, count: null);            var ret = (await ODataGet<T>(uri));            return ret != null ? ret[0] : default(T);        }        public async Task<T> Prior<T>(T Model) where T : new()        {            var typeName = typeof(T).Name;            var uri = new Uri(baseUri, $"{typeName}/GetFull");            VXODataHelper<T>.Prior(Model, out var filter, out var @orderby, out var top);            uri = uri.GetODataUri(filter: filter, top: top, skip: null, orderby: orderby, expand: null, select: null, count: null);            var ret = (await ODataGet<T>(uri));            return ret != null ? ret[0] : default(T);        }    }}